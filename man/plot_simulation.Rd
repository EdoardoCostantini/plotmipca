% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_simulation.R
\name{plot_simulation}
\alias{plot_simulation}
\title{Plot simulation results}
\usage{
plot_simulation(
  results,
  n_items,
  parameter,
  latent_structure,
  method_vector,
  npc_range,
  categories,
  prop_noise,
  outcome
)
}
\arguments{
\item{results}{object containing results produced by the simulation study}

\item{n_items}{experimental factor value: number of items}

\item{parameter}{estimated parameter of interest}

\item{latent_structure}{experimental factor value: whether the latent structure is imposed or not}

\item{method_vector}{experimental factor value: imputation methods considered}

\item{npc_range}{experimental factor value: number of components considered}

\item{categories}{experimental factor value: number of categories of discretized variables}

\item{outcome}{performance measure to plot}
}
\value{
Returns the ggplot
}
\description{
Generate the main plot for the simulation study.
}
\examples{
# Define example inputs
results <- dataResults
n_items <- unique(dataResults$j)[1]
parameter <- levels(dataResults$par)[15]
latent_structure <- unique(dataResults$lv)[2]
method_vector <- levels(dataResults$method)[c(1, 3:5)]
npc_range <- c(0, 10)
categories <- levels(dataResults$K)[c(1, 3, 5)]
prop_noise <- unique(dataResults$pj)[c(1, 4)]
outcome <- c("bias", "CIC", "CIW", "mcsd")[1]

# Use the function
plot_simulation(
    results = dataResults,
    n_items = unique(dataResults$j)[1],
    parameter = levels(dataResults$par)[15],
    latent_structure = unique(dataResults$lv)[2],
    method_vector = levels(dataResults$method)[c(1, 3:5)],
    npc_range = c(0, 10),
    categories = levels(dataResults$K)[c(1, 3, 5)],
    prop_noise = unique(dataResults$pj)[c(1, 4)],
    outcome = c("bias", "CIC", "CIW", "mcsd")[1]
)

}
\author{
Edoardo Costantini, 2023
}
